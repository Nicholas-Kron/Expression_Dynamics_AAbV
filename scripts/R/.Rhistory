rename(region = "V1" ,
position = "V2",
count = "V3")
dat$scaled = scale(dat$count)
dat
}
plotCoverage <- function(sample, Ribo = FALSE) {
#data prep
{
# Read in polyA file coverage file and smooth it
PolyA <- readPerBaseDepth(sample)
#calculate plotting bounds for PolyA
mA <- (PolyA %>% filter(position > 10000 & position < 30000) %>%
summarise(mean = mean(count)))$mean
maxA <- max(PolyA$count)
minA = mA - (maxA - mA)
#Generate titel for plot based on sample name
dats <- mutate(PolyA, method = "PolyA")
if(Ribo == FALSE){
mR = 0
maxR = 0
minR = 0
} else{
RiboDep <- readPerBaseDepth(paste0(sample, "_RiboDep"))
mR <- (RiboDep %>% filter(position > 10000 & position < 30000) %>%
summarise(mean = mean(count)))$mean
maxR <- max(RiboDep$count)
minR = mR - (maxR - mR)
dats <- rbind(mutate(PolyA, method = "PolyA"), mutate(RiboDep, method = "RiboDep") )
}
m = max(mA, mR)
max = max(maxA, maxR)
min = min(minA,minR)
}
## actual plot
{
plotA <- dats %>%
ggplot(data = ., aes(x = position, y = log(count+1,2), color = method)) +
#structural protein regions
geom_rect( data = structural_proteins, aes(
ymin = rep(0,nrow(structural_proteins)),
ymax = rep(Inf),
xmin = start,
xmax = stop,
), fill = structural_proteins$colors,
alpha = 0.5,
inherit.aes = FALSE
) +
geom_text(
data = structural_proteins,
aes( x = (stop+start)/2,
y = Inf,
label = code
),
size = 2.5,
fontface = "bold",
vjust = "inward", hjust = "middle",
inherit.aes = FALSE
) +
#geom_vline(xintercept = 25294, color = "red", linetype = "longdash") +
geom_line() +
#geom_smooth(se = FALSE, color = "blue", span = 0.1)+
theme_classic() +
scale_color_manual(values = c("black","blue")) +
labs(y = "Log10 Depth", x = "Position", color = sample) +
theme(plot.margin=grid::unit(c(0,0,0,0), "mm"))
ann / plotA  +
plot_layout(heights = c(1, 10))
}
ggsave(filename = paste0("../../figures/", sample, "_perBaseDepth_plot.tiff"),
device = "tiff", width = 7, height = 4 )
}
# Trypsin-like_serine_protease	25958	27226
# S-like_protein	27692	30103
# Alphavirus_E1-like_protein	30380	31684
# Alphavirus_E2-like_protein	31931	33094
# N-like_protein	33839	34909
# M-like_protein	33485	33709
plotCoverage(sample = "17B27A", Ribo =TRUE)
samples <- c("SRR385787", "SRR385788", "SRR385792", "SRR385793", "SRR385795", "SRR385800", "SRR385802", "SRR385815")
#"SRP268155","SRP136115"
plotCoverage(sample = "SRR6871219", Ribo =FALSE)
samples <- (meta %>% filter(SRAStudy == "SRP136115"))$Run
#samples <- (meta %>% filter(SRAStudy == "SRP268155"))$Run
#samples <- samples[samples != "SRR12061190"]
coverage_files <- list.files(path="../../data/alignment_stats/", pattern="_Aligned.sortedByCoord.out.bam_perBase_depth.tab")
empty = coverage_files[file.size(list.files(path="../../data/alignment_stats/", pattern="_Aligned.sortedByCoord.out.bam_perBase_depth.tab",full.names = TRUE)) == 0]
coverage_files <- coverage_files[! coverage_files %in% empty]
viral_reads_stats %>% filter(SRAStudy == "SRP268155") %>%
filter(STAR_Uniquely_Mapped > 1000)
lapply(samples,
FUN = function(x){
plotCoverage(x, Ribo = FALSE)
})
plotCoverageSplice <- function(SAMPLE) {
##get junctiond data
{
#junction_files <- list.files(path="../../data/bams/junctions/", pattern="_Aligned.sortedByCoord.out.bam_junctions.txt")
junction_file <-
paste0(
"../../data/junctions/",
SAMPLE,
"_Aligned.sortedByCoord.out.bam_junctions.txt"
)
junction_long <-  read.table(
file = junction_file,
header = TRUE,
stringsAsFactors = FALSE,
strip.white = TRUE,
sep = "\t"
) %>%
mutate(., sample = SAMPLE) %>%
rename(five_prime = "X5.end", three_prime = "X3.end")
}
##get coverage data
{
coverag_file <-
paste0("../../data/alignment_stats/",
SAMPLE,
"_Aligned.sortedByCoord.out.bam_perBase_depth.tab")
coverage <- read.table(
file = coverag_file,
header = FALSE,
stringsAsFactors = FALSE,
sep = "\t"
) %>%
rename(region = "V1" ,
position = "V2",
count = "V3")
smooth <- rollapply(coverage %>% select(position,count),
width = 100, FUN = median, na.rm=TRUE, partial=TRUE) %>%
as.data.frame()
max <- max(coverage$count)
}
##plot
{
CSplot <- ggplot(data = data.frame(x = c(0, 35946), y = c(0, 0)),
aes(x = x, y = y)) +
#structural protein regions
geom_rect(
data = structural_proteins,
aes(
ymin = rep(0, nrow(structural_proteins)),
ymax = rep(Inf),
xmin = start,
xmax = stop,
),
fill = structural_proteins$colors,
alpha = 0.5,
inherit.aes = FALSE
) +
geom_text(
data = structural_proteins,
aes(
x = (stop + start) / 2,
y = Inf,
label = code
),
size = 2.5,
fontface = "bold",
vjust = "inward",
hjust = "middle",
inherit.aes = FALSE
) +
#coverage data
geom_line(
data = smooth,
aes(x = position,
y = count),
color = "black",
inherit.aes = FALSE
) +
#splice data
geom_histogram(
data = junction_long,
aes(x = five_prime),
binwidth = 100,
position = "stack",
fill = "red",
inherit.aes = FALSE
) +
geom_histogram(
data = junction_long,
aes(x = three_prime),
binwidth = 100,
position = "stack",
fill = "blue",
inherit.aes = FALSE
) +
geom_curve(
data = junction_long %>%
group_by(five_prime, three_prime) %>%
summarise(count = n()) %>%
ungroup() %>%
mutate(read_name = paste0(five_prime, "-", three_prime)) %>%
filter(count >= 2),
aes(
x = five_prime,
y = 0,
xend = three_prime,
yend = 0,
group = read_name,
),
color = "black",
size = 0.1,
#alpha = 0.5,
inherit.aes = FALSE
) +
geom_curve(
data = junction_long %>%
group_by(five_prime, three_prime) %>%
summarise(count = n()) %>%
ungroup() %>%
mutate(read_name = paste0(five_prime, "-", three_prime)) %>%
slice_max(count, n = 10),
aes(
x = five_prime,
y = 0,
xend = three_prime,
yend = 0,
group = read_name,
),
color = "red",
size = 0.1,
#alpha = 0.5,
inherit.aes = FALSE
) +
#plot themes
theme_bw() +
labs(y = "Depth", x = "Position") +
coord_cartesian(ylim = c(-max,max)) +
scale_y_continuous(breaks = seq(0,max,1000)) +
annotate("text", x = 30000, y =-max, label = SAMPLE) +
theme(plot.margin = grid::unit(c(0, 0, 0, 0), "mm"))
ann / CSplot  +
plot_layout(heights = c(1, 10))
}
}
plotCoverageSplice(SAMPLE = "17B27A_RiboDep")
plotCoverageSplice(SAMPLE = "17B27A")
plotCoverageSplice(SAMPLE = "2B27A_RiboDep")
plotCoverageSplice(SAMPLE = "19B27A_RiboDep")
plotCoverageSplice(SAMPLE = "19B27A")
plotCoverageSplice(SAMPLE = "SRR6871215")
plotCoverageSplice(SAMPLE = "SRR12061222")
coverage <- read.table(
file = paste0("../../data/alignment_stats/",
"16B27A_RiboDep",
"_Aligned.sortedByCoord.out.bam_perBase_depth.tab"),
header = FALSE,
stringsAsFactors = FALSE,
sep = "\t" )
# s <- "aababacababaaathhhhhslsls jsjsjjsaa ghhaalll"
# p <- "a"
# s2 <- gsub(p,"",s)
# numOcc <- nchar(s) - nchar(s2)
pileup_files <- list.files(path = "../../data/bams/",pattern="_Aligned.sortedByCoord.out.bam.pup")
#length(coverage_files)
empty = pileup_files[file.size(list.files(path="../../data/bams/", pattern="_Aligned.sortedByCoord.out.bam.pup",full.names = TRUE)) == 0L]
pileup_files <- pileup_files[! pileup_files %in% empty]
#samples <- lapply(X = pileup_files, FUN = function(x){str_split(x, pattern = "_")[[1]][1]}) %>% unlist %>% unique
samples <- lapply(X = pileup_files, FUN = function(x){str_remove(x, pattern = "_Aligned.sortedByCoord.out.bam.pup")}) %>% unlist %>% unique
#samples <- samples[str_detect(samples, "SRR6871")] %>% unlist()
samples <- samples[str_detect(samples, "A_RiboDep")] %>% unlist()
#samples <- c("SRR6871214")
#samples <- (meta_mod %>% filter(SRAStudy == "Schmale_RiboDep_A"))$Run
lapply(samples, FUN = function(x){
ifelse(file.exists(paste0("../../data/bams/",x,"_Aligned.sortedByCoord.out.bam.pup")),
rev <- read.table(file = paste0("../../data/bams/",x,"_Aligned.sortedByCoord.out.bam.pup"),
header = FALSE,
stringsAsFactors = FALSE,
sep = "\t"
) %>%
rename( chromosome = "V1" , position = "V2", count = "V4",
reference = "V3", Seq ="V5", quality = "V6") %>%
mutate(SeqLen = nchar(Seq)) %>%
mutate(Skip = SeqLen - nchar(gsub("[<>]","",Seq)))%>%
mutate(propSkip = Skip/SeqLen) %>%
mutate(Seq = gsub(x = Seq, pattern = "[<>]", replacement = "")) %>%
mutate(Seq = str_replace_all(string = Seq, pattern = "[.,]", replacement = reference)) %>%
mutate(SeqLen = nchar(Seq)) %>%
mutate(A = SeqLen - nchar(gsub("[aA]","",Seq)))%>%
mutate(C = SeqLen - nchar(gsub("[cC]","",Seq))) %>%
mutate(G = SeqLen - nchar(gsub("[gG]","",Seq)))%>%
mutate(`T` = SeqLen - nchar(gsub("[tT]","",Seq)))%>%
mutate(propA = A/SeqLen) %>%
mutate(propC = C/SeqLen) %>%
mutate(propG = G/SeqLen) %>%
mutate(propT = `T`/SeqLen)  ,
rev <- data.frame(chromosome = "", position = "", count = "",
reference = "", Seq ="", quality = "")
)
rev <- rev %>% filter(position >= 25259 & position <= 25274)
if( nrow(rev) < 1) { return() }
rev %>%
pivot_longer(data = ., cols = c("C", "G", "T", "A"), names_to = "nuc", values_to = "prop") %>%
ggplot(., aes(x = position, y =prop, fill = nuc)) +
geom_bar(stat = "identity", position = "stack") +
labs( title = x) +
annotate(geom = "text", x = seq(25259,25274,1), y = 0,
label = c("A","A","|T|","T","T","C","|G|","A","A","A","G","T","T","|A|","G","G"))
}
)
lapply(c(samples), FUN = function(x){
ifelse(file.exists(paste0("../../data/bams/",x,"_Aligned.sortedByCoord.out.bam.pup")),
rev <- read.table(file = paste0("../../data/bams/",x,"_Aligned.sortedByCoord.out.bam.pup"),
header = FALSE,
stringsAsFactors = FALSE,
sep = "\t"
) %>%
rename( chromosome = "V1" , position = "V2", count = "V4",
reference = "V3", Seq ="V5", quality = "V6") %>%
mutate(Seq = gsub(x = Seq, pattern = "[<>]", replacement = "")) %>%
mutate(poly = str_replace_all(string = Seq, pattern = "[.,]", replacement = "")) %>%
mutate(Seq = str_replace_all(string = Seq, pattern = "[.,]", replacement = reference)) %>%
mutate(SeqLen = nchar(Seq)) %>%
mutate(PolyLen = nchar(poly)) %>%
mutate(polyrate = PolyLen/SeqLen * 100),
rev <- data.frame(chromosome = "", position = "", count = "",
reference = "", Seq ="", quality = "")
)
rev <- rev %>% filter(position >= 25259 & position <= 25274)
if( nrow(rev) < 1) { return() }
rev %>% filter(position >= 25259 & position <= 25274) %>%
filter(PolyLen > 0) %>%
mutate(sample = x) %>%
select(sample, position, reference,poly, SeqLen, PolyLen)
}
)
# 25259-AATTTCGAAAGTTAGG-25274
# #AA|T|TTC|G|AAAGTT|A|GG
knitr::opts_chunk$set(echo = TRUE)
Tissue_codes <- read.delim("../../data/qPCR/Tissue_codes.txt") %>%
mutate(Tissue_Code = paste0(Tissue, "=", Tissue_Name))
qpcr_bytissue <- read.delim("../../data/qPCR/Schmale_old_animals_qPCR.txt", sep = "\t", header = TRUE,
strip.white = TRUE, stringsAsFactors = FALSE) %>% inner_join(Tissue_codes)
qpcr_wild <- read.delim("../../data/qPCR/Schmale_Wild_qPCR.txt", sep = "\t", header = TRUE,
strip.white = TRUE, stringsAsFactors = FALSE) %>% inner_join(Tissue_codes)
qpcr_primers <- read.delim("../../data/qPCR/Schmale_qPCR_primer_ratios.txt", sep = "\t", header = TRUE,
strip.white = TRUE, stringsAsFactors = FALSE)%>% inner_join(Tissue_codes) %>%
pivot_longer(cols = c(AV4, Pol1, A9), names_to = "Primer", values_to = "Mean")
qpcr_bytissue %>%
group_by(Sample) %>%
ggplot(data =., aes(x = Tissue, group = Sample, y = Mean, fill = Tissue_Code)) +
geom_bar(stat = "identity", position = "dodge") +
theme_classic() +
labs(x = "Tissue", y = "Mean Copies per ng Input RNA (AV4 primer)")
qpcr_bytissue %>%
group_by(Sample) %>%
ggplot(data =., aes(x = Tissue, y = Mean, fill = Tissue_Name)) +
geom_boxplot()
qpcr_wild %>%
group_by(Sample) %>%
ggplot(data =., aes(x = Tissue, group = Sample, y = Mean, fill = Tissue_Code)) +
geom_bar(stat = "identity", position = "dodge") +
theme_classic() +
labs(x = "Tissue", y = "Mean Copies per ng Input RNA (AV4 primer)")
qpcr_primers %>%
ggplot(data =., aes(x = Animal,y = Mean, fill = Primer)) +
geom_bar(stat = "identity", position = "dodge") +
theme_classic() +
labs(x = "Animal ID", y = "Mean Copies per ng Input RNA")
##fix region numbers
min = 0.2
max = 0.5
ggplot(data = data.frame(x = c(1,35000), y = c(1,1))) +
#geom_rect( ymin = max + 0.1, ymax = max + 0.2, xmin =1, xmax = 110, fill = "white", color = "black") +
geom_rect( ymin = max + 0.05, ymax = max + 0.1, xmin =0, xmax = 35948, fill = "grey75") +
geom_rect( ymin = max + 0.1, ymax = max + 0.2, xmin =110, xmax = 17563, fill = "white", color = "black") +
geom_rect( ymin = max + 0.1, ymax = max + 0.2, xmin =17564,xmax = 25240, fill = "white", color = "black") +
geom_rect( ymin = max + 0.1, ymax = max + 0.2, xmin =25294,xmax = 34962, fill = "white", color = "black") +
annotate("text", x = (17563+110)/2, y = max + 0.15, label = "ORF1a") +
annotate("text", x = (17564+25240)/2, y = max + 0.15, label = "ORF1b") +
annotate("text", x = (25294+34962)/2, y = max + 0.15, label = "ORF2") +
annotate("text", x = (543 + 684)/2 , y = max + 0.3, label = "AV4") +
annotate("text", x = (17791 + 17937)/2, y = max + 0.3, label = "Pol1") +
annotate("text", x = (32625 + 32738)/2, y = max + 0.3, label = "A9") +
geom_point(data = data.frame(x = c(
(543 + 684)/2,
(17791 + 17937)/2,
(32625 + 32738)/2),
y = rep(max + 0.24,3)),
aes(x=x, y=y),
shape = 25, fill = "black") +
coord_cartesian(ylim = c(min, max+1),xlim = c(0,36100)) +
theme_classic() +
theme(axis.line = element_blank(),
axis.text = element_blank(),
axis.ticks = element_blank(),
axis.title = element_blank())
ggsave("../../figures/Primer_locations.pdf", device = "pdf", width = 7.5, height = 4)
load("../../data/rdata/region_hits.R")
schmale_meta %>% select(Run, Sample, LibrarySelection) %>%
inner_join(region_hits, by = c("Run" = "sample")) %>%
filter( str_detect(name, "primer")) %>%
mutate(name = str_remove(name, "_qPCR_primer")) %>%
rename("Primer" = name, method = LibrarySelection) %>%
inner_join(processing_stats %>% select(Sample,STAR_Input) %>% rename(Run = Sample)) %>%
mutate(CPM = (hits/STAR_Input)*1000000) %>%
mutate(
Animal = str_remove(Sample,"B27[AL]") %>% as.numeric(),
Tissue = str_extract(Sample,"[AL]"),
Group = "27",
Tissue_Name = ifelse(Tissue == "A", "Abdominal Ganglia","Gills")
) %>%
full_join(qpcr_primers %>%
rename(CPM = Mean) %>%
mutate(method = "qPCR")) %>%
filter(Sample %in% qpcr_primers$Sample & Sample %in% RiboDep$sample) %>%
ggplot(data =., aes(x = Sample, y = log(CPM + 1, 10), fill = method)) +
geom_bar(stat = "identity", position = "dodge") +
facet_grid(Primer ~ Tissue_Name, scales = "free") +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust=0.15, size = 8))  +
theme(axis.text = element_text(face = "bold", color = "black"),
axis.title = element_text(face = "bold", color = "black"),
strip.text = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
legend.text =  element_text(face = "bold")) +
labs(y = "log10 CPM (RNAseq) or Copies/ng (qPCR)", fill = "Method") +
theme_classic()
schmale_meta %>% select(Run, Sample, LibrarySelection) %>%
inner_join(region_hits, by = c("Run" = "sample")) %>%
filter( str_detect(name, "primer")) %>%
mutate(name = str_remove(name, "_qPCR_primer")) %>%
rename("Primer" = name, method = LibrarySelection) %>%
inner_join(processing_stats %>% select(Sample,STAR_Input) %>% rename(Run = Sample)) %>%
mutate(CPM = (hits/STAR_Input)*1000000) %>%
mutate(
Animal = str_remove(Sample,"B27[AL]") %>% as.numeric(),
Tissue = str_extract(Sample,"[AL]"),
Group = "27",
Tissue_Name = ifelse(Tissue == "A", "Abdominal Ganglia","Gills")
) %>%
full_join(qpcr_primers %>%
rename(CPM = Mean) %>%
mutate(method = "qPCR")) %>%
filter(Sample %in% qpcr_primers$Sample & Sample %in% RiboDep$sample) %>%
pivot_wider(id_cols = c(Sample, Tissue, Primer), names_from = method, values_from = CPM) %>%
mutate("qPCR/RiboDeplete" = qPCR/RiboDeplete,
"qPCR/PolyA" = qPCR/PolyA,
"RiboDeplete/PolyA" = RiboDeplete/PolyA) %>%
pivot_longer(data = ., cols = c(qPCR,RiboDeplete,PolyA,
"qPCR/RiboDeplete","qPCR/PolyA","RiboDeplete/PolyA"),
names_to = "method", values_to = "CPM") %>%
filter(str_detect(method, "/")) %>%
ggplot(data =., aes(x = Sample, y = CPM, fill = method)) +
geom_bar(stat = "identity", position = "dodge") +
theme(axis.text.x = element_text(angle = -45, vjust = 1, hjust=0.15, size = 8))  +
theme(axis.text = element_text(face = "bold", color = "black"),
axis.title = element_text(face = "bold", color = "black"),
strip.text = element_text(face = "bold"),
legend.title = element_text(face = "bold"),
legend.text =  element_text(face = "bold")) +
labs(y = "Ratio", fill = "Method") +
theme_classic()
Tissue_codes <- read.delim("../../data/qPCR/Tissue_codes.txt") %>%
mutate(Tissue_Code = paste0(Tissue, "=", Tissue_Name))
qpcr_bytissue <- read.delim("../../data/qPCR/Schmale_old_animals_qPCR.txt", sep = "\t", header = TRUE,
strip.white = TRUE, stringsAsFactors = FALSE) %>% inner_join(Tissue_codes)
qpcr_wild <- read.delim("../../data/qPCR/Schmale_Wild_qPCR.txt", sep = "\t", header = TRUE,
strip.white = TRUE, stringsAsFactors = FALSE) %>% inner_join(Tissue_codes)
qpcr_primers <- read.delim("../../data/qPCR/Schmale_qPCR_primer_ratios.txt", sep = "\t", header = TRUE,
strip.white = TRUE, stringsAsFactors = FALSE)%>% inner_join(Tissue_codes) %>%
pivot_longer(cols = c(AV4, Pol1, A9), names_to = "Primer", values_to = "Mean")
qpcr_bytissue %>%
group_by(Sample) %>%
ggplot(data =., aes(x = Tissue, group = Sample, y = Mean, fill = Tissue_Code)) +
geom_bar(stat = "identity", position = "dodge") +
theme_classic() +
labs(x = "Tissue", y = "Mean Copies per ng Input RNA (AV4 primer)")
qpcr_bytissue %>%
group_by(Sample) %>%
ggplot(data =., aes(x = Tissue, y = Mean, fill = Tissue_Name)) +
geom_boxplot()
qpcr_wild %>%
group_by(Sample) %>%
ggplot(data =., aes(x = Tissue, group = Sample, y = Mean, fill = Tissue_Code)) +
geom_bar(stat = "identity", position = "dodge") +
theme_classic() +
labs(x = "Tissue", y = "Mean Copies per ng Input RNA (AV4 primer)")
qpcr_primers %>%
ggplot(data =., aes(x = Animal,y = Mean, fill = Primer)) +
geom_bar(stat = "identity", position = "dodge") +
theme_classic() +
labs(x = "Animal ID", y = "Mean Copies per ng Input RNA")
region_hits %>% filter(sample %in% schmale_meta$Run)
schmale_meta %>% select(Run, Sample, LibrarySelection) %>%
inner_join(region_hits, by = c("Run" = "sample")) %>%
filter( str_detect(name, "primer")) %>%
mutate(name = str_remove(name, "_qPCR_primer")) %>%
rename("Primer" = name, method = LibrarySelection) %>%
full_join(qpcr_primers %>%
rename(hits = Mean, tissue = Tissue) %>%
mutate(method = "qPCR")) %>%
pivot_wider(id_cols = c(-Primer,-start,-stop,-hits), names_from = Primer, values_from = hits) %>%
mutate("AV4/Pol1" = AV4/Pol1,
"AV4/A9" = AV4/A9,
"Pol1/A9" = Pol1/A9) %>%
pivot_longer(data = ., cols = c(AV4,Pol1,A9,"AV4/Pol1","AV4/A9","Pol1/A9")) %>%
filter(str_detect(name, "/")) %>%
ggplot(data =., aes(x = name, y = value, fill = method)) +
geom_boxplot() +
theme_classic() +
scale_y_continuous(breaks =  seq(0, 100, by = 1)) +
theme(axis.text = element_text(color = "black"),
axis.title = element_text(color = "black"),
strip.text = element_text(color = "black"),
legend.title = element_text(color = "black"),
legend.text =  element_text(color = "black")) +
labs(x = "Primer Regions", y = "Ratio", fill = "Method")
region_hits
load("../../data/rdata/processing_stats.R")
